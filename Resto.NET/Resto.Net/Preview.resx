<?xml version="1.0" encoding="utf-8"?>
<root>
  <!--
    Microsoft ResX Schema 

    Version 2.0

    The primary goals of this format is to allow a simple XML format
    that is mostly human readable. The generation and parsing of the
    various data types are done through the TypeConverter classes
    associated with the data types.

    Example:

    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>

    There are any number of "resheader" rows that contain simple
    name/value pairs.

    Each data row contains a name, and value. The row also contains a
    type or mimetype. Type corresponds to a .NET class that support
    text/value conversion through the TypeConverter architecture.
    Classes that don't support this are serialized and stored with the
    mimetype set.

    The mimetype is used for serialized objects, and tells the
    ResXResourceReader how to depersist the object. This is currently not
    extensible. For a given mimetype the value must be set accordingly:

    Note - application/x-microsoft.net.object.binary.base64 is the format
    that the ResXResourceWriter will generate, however the reader can
    read any of the formats listed below.

    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        AAABAAEAAAAAAAEAIACnDAAAFgAAAIlQTkcNChoKAAAADUlIRFIAAAEAAAABAAgEAAAA9ntg7QAAAAFv
        ck5UAc+id5oAAAxhSURBVHja7Z17lBZlHce/+7K7LIsLuwjLJREPuJXcNRAVDTtJitwpCkwy8xSXk6hB
        h7hYXNRTcOQiFyE4yamMi0p4KoOUKAXkwBLmBU1YrkIgIijXBZa3GV7JZW/vzPs+t3me73f+fXf2mfl8
        ZuZ55vnNDBA8dbAc8QrLhxgIRmwaYgpuM7FhHbCvkgBx7EBPMhOYfMzBWWxCJ/OaNq4K/P6yE73ITRj+
        uTh3ca9uNk2BRthQjQBUQDx+AxXoixPVCkAFxOM3TIFM/LoG/FRABn6jFGiF7UkEoALi8RukwANezzRO
        BZTjN0SBXLwQAD8VkIHfCAU6YH9AAaiAePwJBTrrbOQInA8sABUQj99f1uFqXY3MwdIQ+KmADPxnMRN5
        upp5LUpCCkAFROOfgXr6GnoPzoQWgApYgz+GOSngpwKW4Aca1DAHQAWsxw9cj0MpC0AFIo8fuD/QPUAq
        YCn+GGanhZ8KRBo/UB9r0xaACkQWP9ASuwUIQAUiih/ojk+ECEAF5OD/mtdJl5oHUSZIALcVkIO/j3d+
        LpY5TZSBp4Thd1kBefglTxbXxUqhAripgFz8UhVo6K06TgUMxy9RgWuwV7gAbilQgHkK8EtT4GYckSCA
        Owqowy9JgX41PgtABUzCL0WBdOcBXFZAPX4JCjwsDb/tCujBL7x8dKJUAexVQB/+hALtRG3IDMkC2KmA
        XvxxbEUHMRtSC09LF8A+BfTjv0nUpiR/IJQKWIwfyMIiJQLYo4BV+IFsPKNIADsUsAy/WgGir4B1+P1O
        4HyFAkRbAQvxqxkG2qGApfiBJxQLEE0FrMUPTFAuQPQUsBi//16AMipgCf7GKAq/eQNwUoMA0VEgOvib
        YRk2hp8mukVSQYgdCkQJ/9LUJotb4QNNApivQAGejhj+FBQoxL+1CWC2AtHEH1qBXKzQKIC5CkQXf2gF
        ntAqgJkKRBt/SAWGoJQKWIY/lAKdcFizAGYpEBz/aUw3Fn8IBQrxhnYBzFEgOP443vLGUObiD6xAJhYa
        IIAZCoTBH/cunfPRwGD8/rIJXZOvTOazAVFSIA+zQ70wN+79ekFSBXTij+MEHky+utYabwaZo0AdPJ5C
        dziZAnrxn8RYb6CfNFfgJUME0KdAJkanOCtSkwK68Y9DTrCVjsIFxxXoj49SbnF1CkQGP9AWe4wRQIcC
        bdO8IV6VArrxjw+O3y8OXWyQAKoVqIdlabe4ogKRwq+zLsAEBYam9K70mhSIHH7/o5HrjRJAnQKtsU1Q
        iy8pEEH8foYZcjdArQJZAl6UW16B+bgXu6KIH2iKjYYJoEKBLjggtMXnA79xxTD8fkaEuA1qhwJZih+M
        MRq/fw7YYJwAchXoJPj4jzR+P4Nw3CkFJhF/xQKx3xkogCwFmqCY+CufFHc7o8A3cYr4KyYDo7WXiKlR
        ICb4NdlW4PdTH88aKYBoBQqVXwAigd/Pl7RcG1UrcDuOEn916YGD1iswUukU+JYo4fevj8OFfUjGTAVi
        mKuwzUe8QypC+BMTxGM19JHVKVAfryhs8dmA5aPG4E/cE5hq3PSQOAWaYbvSFgcpHzUKf+IomWfg7IAY
        BVor7+UkU8A4/H7C1clHSYFuiscAyRQwEr/NCgzU0sOpTgFj8durwCOaWlyVAmHwT1CN31YFntTW4ooK
        GI/fRgXq4DmNLS6vQCTw26dAc2GFoOkpEBn8tinQX3sRvF8+2h5LooPfJgVimGVAi0tREvBZZEPw26NA
        JiYZuxVG47dHgXw8ZextbqPx26NA/UgoYCB+KuA8firgPP6EAvOsUGCWoQoYjp8KOI+fCjiPnwo4j58K
        OI+fCjiPnwo4j58KOI+fCjiPnwo4j58KpIP/URvwUwHn8dujQD1lCliGnwo4j58KOI+fCjiP36bu4ExJ
        CliO36azgAwFPsVY2/FTgeqXwxiBbDgRKlB5KcFgxOBMqMDlyxrcAsdCBS4tR711XAUHQwXiKMOr6Iva
        cDRuK3AB73q9/mZwOq4qcB7b8HMUgXFQgSNYhWFoSfSuKXAGB7Aaj6Kb91vGSgVmVFCgFMdwCLuwCcsx
        Gd9Fe6K3X4FzF0/y67EAE3Af7kA7b4jXEHWI2JVpojEYj1txJWoRqZsKZBCk6wowVIBJR4G5VMDt5FMB
        KkAFqAAVoAJUgApQASpABagAFaACVIAKUAEqQAWoABWgAlSAClABKkAFqAAVoAJUgAoYtOyiAlSAClAB
        AqICDBVgqACTUnLQIuATNlTAwmRjNIpxF88CruL/CT71dt523EkF3MUfpwKu46cCzuOnAs7jpwLO408o
        wBGBw/ipgPP4ZStwDGeogNn4ZSqwB4PwK2Wfg6MCKeKXpcAe9IP/bq+FuEAFzMYvQ4G9F/H7aYzn2Rcw
        Hb+/7BCowF70L/f7lnhFoQK9iT8V/CIVuBy/n/bYTAVMxy9Kgcr4/dyK96iA6fhFKFA1fj+9sI8KmI4/
        XQX2YkANv78XH1EB0/Gno0DN+IFaGInjVMB0/KkqkAy/n9qYqOzeoGMKiMQfXoHz3vV9QKBfX4HZ3q+p
        gOH4wylQgCkB8fu5Er9XOk3Um/jlK5AZ6l3+zfEXKmA+/oQCPaS0+ctYRwXMxy9Tgc54kwqYj1+mAndg
        JxUwH79MBb6Fg1TAfPzyFMjAD3GMCpiPX54CWfgZTlEB8/HLUyAXU5WWmlqhgA78/lIiRYF8LFJWNGaF
        ArrwJxToKeHzjU3wguIi8t7En+ryGhpL2KpWWEMFooD/AAZL+nJvBxRTAfPxf0fi93tvw3+ogLv4/fTC
        B1TAXfx+huAIFXAXv1809hBOUAFX8fupjckopQKu4veThzkoowKu4vfTEH9Q/n6B3sRvCn4/zfESFXAX
        v5/rsN51BVzG7+dGvOWyAq7j99PdQ+KoAsSfyEAcclEB4r+UGIbiE9cUIP7yycJYnHZJAeKvmFxMU/5+
        Qm0KEH9VycdvlBaNaVOA+KtLU/xR+d5QrgDx15RW+LvdChB/snTEFnsVIP4g+Sre16BAH+I3J32wX/ne
        2S1bAeIPk+8pLhqTrgDxh0stPKy4aEyqAsQfPjmYorhoTJoCxJ9a8jBXcdGYFAWIP/U0whINe0yoAsSf
        Xq7GX6OsAPGnn9bYEFUFiF9MuuDtKCpA/OLyDQ9HxBQgfrH5tvKisbQUIH7RiWGY8qKxlBUgfjk308Yp
        LxpLSQHil5VcPKnlo7ahFCB+mSnAM8qLxkIpQPyy0xQrtezZQAoQv4pci3+YqQDxq8r1+Jd5CsTwY+JX
        lm4aisYSCtxdXZP6arlR4Sb+xP7er2VPv40bqmrOV/AO8StNBr6Pj7Xs7b+hecXGXIWXiV95Mr0+10kt
        e3wR8i53caKWsanb+P3k4DENRWNxnMGPyjejLXYQv6bkYZ6GorE4Nntn/c9SC9OIX2MaYamGPX/eu/z8
        f0y6l/i1pgVWadj7b6Jl4t+PIX7taYPXle//MgxLXIP+RPwG5CYNw/BnvU4oOmq5ABB/5dypvGjsfRQB
        I70hAfGbkUH4UCmHE7gPWEj8xiSG4YpnY+YALxK/QcnGeKVFY89D8SMLxJ8sdTFdYdHYq1B6D5D4g6QA
        i5UReRceFOI3Lc2UXZj/C2WjT+IPkyJFRWPboegfEX/Y3ICtCrisB54jfkNzu3d8yiazEphF/Mamn/Qe
        2gLgHhwnfkOTgftxVCKb0xgOtMQ24jc2mRglsWhsF9r6nz9cTPwGJweP46wkPitQ1/8XD0i680T8YlIP
        8yUVjX1WE9QcxcRvdAqxTAKhEv8CkMgI4ScZ4heba7BauABTPifURPCnD4lffNpio+BZgC+WX/0QgX1N
        4peTmwWO18ow5vKV52KmoI4G8cvLXdgjSIAXvX5FhTQWMgNF/HIzGIcFUNqCNlWtvE3ao4H9xC85Ma/D
        nm7R2D50r271XbEpjRW/h/7ELz3Z+CmOpXWQDqlp9ddhRYp9gbXoQjpKkuUh3JUi/q3okewgLcT00CeZ
        Uiz2RqqMunRLYVB4AX9Gu2B3nwdgFU4FfshwE4aiPpkoThFmhHrDyE5MRpPgqy/wTjP/TDpRfM47pTyE
        L5CGlmTiRiwI9FqfPZjmHfuxsP+gIe7GL7HOG3iUVrqN8DHewEL8AC3IQXOXsCsmYQ0Oemfiqi7N+/Ey
        foGO4eF/nkb4Oh7BVPzWW9XrWI0lmOutsqd33Gdx/xuSBp4GEzwya7HNOzTPeDq8g9ewHKPQGfk1/+n/
        AMOBWpNOIWjNAAAAAElFTkSuQmCC
</value>
  </data>
</root>